#include "ofApp.h"

const int IMG_SIZE = 300;

//--------------------------------------------------------------
void ofApp::setup(){
    ofSetOrientation(OFXIOS_ORIENTATION_PORTRAIT);
    ofSetVerticalSync(true);
    ofSetFrameRate(10);
    
    // Load kerasified keras model
    // dont't forget to convert keras model into kerasify model with convert_keras_model.py
    kerasify.loadModel("keras_dog.model");
    
    // GUI
    ofxGuiSetDefaultWidth(200);
    ofxGuiSetDefaultHeight(20);
    
    gui.setup();
    gui.setName("Image Regression");
    gui.add(randomToggle.setup("Random Dropout", false));
    labelStr = "Tap to generate image";
}

//--------------------------------------------------------------
void ofApp::update(){
    
}

//--------------------------------------------------------------


void ofApp::infer(){
    // ofPixel to buffer pixel values generated by Neural Network
    ofPixels pixels;
    pixels.allocate(IMG_SIZE, IMG_SIZE, OF_PIXELS_RGB);
    
    // Coordinate data fed into the model
    std::vector<float> coord;
    for (int x=0; x<IMG_SIZE; x++){
        for (int y=0; y <IMG_SIZE; y++){
            coord.push_back(ofMap(x, 0, IMG_SIZE, -0.5, 0.5));
            coord.push_back(ofMap(y, 0, IMG_SIZE, -0.5, 0.5));
        }
    }
    
    // INFERENCE
    int input_size = IMG_SIZE*IMG_SIZE;
    std::vector<int> input_dim{input_size, 2};   // xy coordinate
    std::vector<int> output_dim{input_size, 3};  // corresponding RGB value
    std::vector<float> output(input_size * 3);

    // Random Dropout
    // Let's see what happens when you randomly disable layers in the model
    if (randomToggle){
        int layerNum = kerasify.getNumberOfLayers();
        for (int i=2; i <layerNum -1; i++){ // do n
            kerasify.setLayerEnabled(i, (bool)(rand()%2));
        }
    } else{
        kerasify.reset();
    }
    
    bool result = kerasify.predict(input_dim, coord, output_dim, output);
    if (result){
        for (int x=0; x<IMG_SIZE; x++){
            for (int y=0; y <IMG_SIZE; y++){
                int index = y * IMG_SIZE + x;
                unsigned char r = (output[index * 3 + 0] + 0.5) * 255.;
                unsigned char g = (output[index * 3 + 1] + 0.5 ) * 255.;
                unsigned char b = (output[index * 3 + 2] + 0.5) * 255.;
                pixels.setColor(x, y, ofColor(r, g, b));
            }
        }
        
        // Copy pixels into image
        dispatch_async(dispatch_get_main_queue(), ^{
            img.setFromPixels(pixels);
        });
    }
    
    labelStr = "Image Gnerated!";
    if (randomToggle) labelStr += " - with Random Dropout";
    isGenerating= false;
}


//--------------------------------------------------------------
void ofApp::draw(){

    gui.draw();
    ofDrawBitmapString(labelStr, 10, ofGetHeight() - 30);

    if (img.isAllocated()){
        ofSetColor(255);
        ofSetRectMode(OF_RECTMODE_CENTER);
        img.draw(ofGetWidth() * 0.5, ofGetHeight() * 0.5);
    }
}


//--------------------------------------------------------------
void ofApp::exit(){

}

//--------------------------------------------------------------
void ofApp::touchDown(ofTouchEventArgs & touch){

}

//--------------------------------------------------------------
void ofApp::touchMoved(ofTouchEventArgs & touch){

}

//--------------------------------------------------------------
void ofApp::touchUp(ofTouchEventArgs & touch){
    if (isGenerating) return;
    isGenerating = true;
    
    labelStr = "Generating image...";
    
    // run keras model in another thread
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0),
                   ^{ infer(); });
}

//--------------------------------------------------------------
void ofApp::touchDoubleTap(ofTouchEventArgs & touch){

}

//--------------------------------------------------------------
void ofApp::touchCancelled(ofTouchEventArgs & touch){
    
}

//--------------------------------------------------------------
void ofApp::lostFocus(){

}

//--------------------------------------------------------------
void ofApp::gotFocus(){

}

//--------------------------------------------------------------
void ofApp::gotMemoryWarning(){

}

//--------------------------------------------------------------
void ofApp::deviceOrientationChanged(int newOrientation){

}
